{"version":3,"sources":["components/QuestionBox.js","App.js","index.js"],"names":["QuestionBox","showAnswers","handleAnswer","currIndex","handleNextQuestion","data","category","question","correct_answer","answers","score","className","class","dangerouslySetInnerHTML","__html","map","answer","textColor","bgColor","onClick","shuffle","arr","i","rand_i","max","Math","floor","random","temp","refreshPage","window","location","reload","App","useState","setCategory","setScore","questions","setQuestions","setCurrIndex","setShowAnswers","useEffect","fetch","then","res","json","results","incorrect_answers","length","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAuDeA,EAlDK,SAAC,GAML,IALZC,EAKW,EALXA,YACAC,EAIW,EAJXA,aACAC,EAGW,EAHXA,UACAC,EAEW,EAFXA,mBAEW,IADXC,KAAOC,EACI,EADJA,SAAUC,EACN,EADMA,SAAUC,EAChB,EADgBA,eAAgBC,EAChC,EADgCA,QAC3CC,EAAW,EAAXA,MACA,OAAQ,gCACJ,sBAAMC,UAAU,8BAAhB,UACA,8BACI,4CACWL,OAGf,sBAAKK,UAAU,UAAf,uBACeR,EAAU,EADzB,YAIJ,sBAAKS,MAAM,YAAX,UACI,qBAAKA,MAAM,wCAAX,SACI,oBAAIA,MAAM,uBAAuBC,wBAAyB,CAAEC,OAAQP,OAExE,qBAAKK,MAAM,8BAAX,SACKH,EAAQM,KAAI,SAACC,GACV,IAAMC,EAAWhB,EAAc,yBAA2B,GACpDiB,EAAUjB,EAAee,IAAWR,EAAiB,eAAiB,aAAgB,cAC5F,OACA,wBACAI,MAAK,UAAKM,EAAL,YAAgBD,EAAhB,gBAAyCE,QAAS,kBAAMjB,EAAac,IAC1EH,wBAAyB,CAAEC,OAAQE,aAI/C,sBAAKJ,MAAM,8BAAX,UACI,8BACI,iDACoBF,OAGxB,qBAAKE,MAAM,UAAX,SACSX,EAAc,wBACfkB,QAASf,EACTQ,MAAK,qEAFU,2BAGf,wBACAA,MAAK,mEADL,oCCrChB,SAASQ,EAAQC,GAEf,IAAI,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACtB,IAAIC,GAPYC,EAOUF,EANvBG,KAAKC,MAAMD,KAAKE,SAAWH,IAO1BI,EAAOP,EAAIC,EAAE,GACjBD,EAAIC,EAAE,GAAKD,EAAIE,GACfF,EAAIE,GAAUK,EAVpB,IAAsBJ,EAapB,OAAOH,EAGT,SAASQ,IACPC,OAAOC,SAASC,SAwEHC,MArEf,WACE,MAAgCC,mBAAS,IAAzC,mBAAO5B,EAAP,KAAiB6B,EAAjB,KACA,EAA0BD,mBAAS,GAAnC,mBAAOxB,EAAP,KAAc0B,EAAd,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAkCJ,mBAAS,GAA3C,mBAAO/B,EAAP,KAAkBoC,EAAlB,KACA,EAAsCL,oBAAS,GAA/C,mBAAOjC,EAAP,KAAoBuC,EAApB,KAoCA,OAlCAC,qBAAU,WACRC,MA9BQ,uDA8BGC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAAQF,MAAK,SAACtC,GAEzC,IAAMgC,EAAYhC,EAAKyC,QAAQ/B,KAAI,SAACR,GAAD,mBAAC,eAC/BA,GAD8B,IAEjCE,QAASW,EAAQ,CAACb,EAASC,eAAgBD,EAASwC,kBAAkB,GAAIxC,EAASwC,kBAAkB,GAAIxC,EAASwC,kBAAkB,UAItIT,EAAaD,GACbF,EAAY9B,EAAKyC,QAAQxC,UACzBiC,EAAa,QAEd,IAqBKF,EAAUW,OAAS,EACzB7C,GAAakC,EAAUW,OACxB,sBAAKrC,UAAU,8BAAf,UACC,8BAAK,4DAA+BD,OAEpC,wBACAC,UAAU,0BACVQ,QAASU,EAFT,4BAIC,qBAAKlB,UAAU,YAAf,SACC,cAAC,EAAD,CACAN,KAAMgC,EAAUlC,GAChBD,aA/BiB,SAACc,GAChBf,IAECe,IAAWqB,EAAUlC,GAAWK,eAEjC4B,EAAS1B,EAAQ,GAEjBuC,QAAQC,IAAI,YAGdV,GAAe,KAsBfrC,UAAWA,EACXG,SAAUA,EACVL,YAAaA,EACbG,mBArBuB,WACzBoC,GAAe,GACfD,EAAapC,EAAW,IAoBtBO,MAAOA,MAIP,4CCpFNyC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7e0f6197.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\n\r\nconst QuestionBox = ({\r\n    showAnswers,\r\n    handleAnswer,\r\n    currIndex,\r\n    handleNextQuestion,\r\n    data: {category, question, correct_answer, answers},\r\n    score}) => {\r\n    return (<div>\r\n        <div  className=\"grid grid-cols-2 gap-6 mt-6\">\r\n        <div>\r\n            <h2>\r\n            Category: {category}\r\n            </h2>\r\n        </div>\r\n        <div className=\"ml-auto\">\r\n            Question: {currIndex+1}/10\r\n        </div>\r\n        </div>\r\n    <div class=\"container\">\r\n        <div class=\"bg-gray-100 p-10 rounded-lg shadow-md\">\r\n            <h2 class=\"text-2xl text-center\" dangerouslySetInnerHTML={{ __html: question}}/>\r\n        </div>\r\n        <div class=\"grid grid-cols-2 gap-6 mt-6\">\r\n            {answers.map((answer) => {\r\n                const textColor= showAnswers ? 'text-white text-shadow' : '';\r\n                const bgColor = showAnswers ? (answer === correct_answer ? 'bg-green-300' : 'bg-red-300') : 'bg-gray-300';\r\n                return (\r\n                <button \r\n                class={`${bgColor} ${textColor} p-4 rounded`} onClick={() => handleAnswer(answer)} \r\n                dangerouslySetInnerHTML={{ __html: answer}}/>\r\n            )})}\r\n        </div>\r\n    </div>\r\n    <div class=\"grid grid-cols-2 gap-6 mt-6\">\r\n        <div>\r\n            <h3>\r\n                Current score: {score} \r\n            </h3>\r\n        </div>\r\n        <div class=\"ml-auto\">\r\n                {showAnswers ? <button \r\n                onClick={handleNextQuestion}\r\n                class={`p-2 rounded bg-gray-200 text-black bg-opacity-100 text-opacity-100`}>Next Question</button>:\r\n                <button \r\n                class={`p-2 rounded bg-gray-200 text-black bg-opacity-20 text-opacity-30`}>Next Question</button>}\r\n        </div>\r\n    </div>\r\n    </div>\r\n)};\r\n\r\nexport default QuestionBox;","import React, {useState, useEffect} from 'react';\n// import './App.css';\nimport './components/QuestionBox'\nimport QuestionBox from './components/QuestionBox';\n\nconst url = \"https://opentdb.com/api.php?amount=10&type=multiple\";\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nfunction shuffle(arr){\n\n  for(let i = 4; i > 1; i--){\n      let rand_i = getRandomInt(i);\n      let temp = arr[i-1];\n      arr[i-1] = arr[rand_i];\n      arr[rand_i] = temp;\n  }\n  \n  return arr;\n}\n\nfunction refreshPage(){\n  window.location.reload();\n}\n\nfunction App() {\n  const [category, setCategory] = useState([]);\n  const [score, setScore] = useState(0);\n  const [questions, setQuestions] = useState([]);\n  const [currIndex, setCurrIndex] = useState(0);\n  const [showAnswers, setShowAnswers] = useState(false);\n\n  useEffect(() => {\n    fetch(url).then((res) => res.json()).then((data) => {\n      // console.log(data);\n      const questions = data.results.map((question) =>({\n        ...question,\n        answers: shuffle([question.correct_answer, question.incorrect_answers[0], question.incorrect_answers[1], question.incorrect_answers[2]])\n\n      }))\n\n      setQuestions(questions);\n      setCategory(data.results.category);\n      setCurrIndex(0);\n    });\n  }, []);\n\n  const handleAnswer = (answer) => {\n    if(!showAnswers){\n        // console.log(\"pressed answer:\" ,answer);\n      if(answer === questions[currIndex].correct_answer){\n        // console.log(\"Correct!!\");\n        setScore(score + 1);\n      }else{\n        console.log(\"Wrong :(\");\n      }\n\n      setShowAnswers(true);\n    }\n  };\n\n  const handleNextQuestion = () => {\n    setShowAnswers(false);\n    setCurrIndex(currIndex +1);\n  };\n\n  return (questions.length > 0 ? \n    currIndex >= questions.length ? \n  (<div className='container grid-cols-1 gap 6'>\n    <div><h1>Game Over! your score is: {score}</h1></div>\n    \n    <button\n    className='bg-gray-300 p-2 rounded' \n    onClick={refreshPage}> Play Again</button>\n  </div>) :\n    (<div className='container'>\n      <QuestionBox \n      data={questions[currIndex]} \n      handleAnswer={handleAnswer} \n      currIndex={currIndex}\n      category={category}\n      showAnswers={showAnswers}\n      handleNextQuestion={handleNextQuestion} \n      score={score}/>\n    </div>\n      \n    ):(\n      <h2>\n        Loading..\n      </h2>\n    )\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}